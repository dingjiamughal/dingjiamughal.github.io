(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{76:function(n,t,a){"use strict";a.r(t);var r=a(0),e=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"css3-transition-transform-animation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css3-transition-transform-animation","aria-hidden":"true"}},[n._v("#")]),n._v(" CSS3 transition transform animation")]),a("p",[n._v("CSS3动画效果transition transform animation\ntransition:过渡效果，需要通过事件触发\ntransform：变换效果，旋转，缩放，偏移等等\nanimation：动画效果，和transition很接近，但可以自定义动画帧")]),a("h3",{attrs:{id:"transition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transition","aria-hidden":"true"}},[n._v("#")]),n._v(" transition")]),a("p",[n._v("从transition说起，是因为transition是我最早接触的css3动画属性。对transition：all 1s;牢记在心。\n首先transition一定是触发需要事件支持，hover,active,visited。\ntransition: background-color 0.3s ease;接受三个值[过渡属性，时间，运动曲线]，前两个没什么花头，所以整理了一下第三个参数linear | ease-in | ease-out | ease-in-out | cubic-bezier），默认为"),a("code",[n._v("linear")]),n._v("线性匀速运动，"),a("code",[n._v("ease-in")]),n._v("先慢后快，"),a("code",[n._v("ease-out")]),n._v("先快后慢，"),a("code",[n._v("ease-in-out")]),n._v("先慢后快再慢，"),a("code",[n._v("cubic-bezier")]),n._v("内塞尔曲线，这个复杂的东西没什么应用场景。针对"),a("code",[n._v("ease-in | ease-out | ease-in-out")]),n._v("，可以联想XXOO，ease-in进入的时候要找对洞口所以进入开始很慢，等瞄准之后就开始快了，ease-out出来的时候快，但是接近洞口的时候会放慢免得滑出来，所以是先快后慢，ease-in-out概述了整个流程为先慢后快再慢。如此联想，老司机对这个属性应该能够秒记了，字母最长的最猛的transition属性拥有的ease属性。")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("transition:all 3s ease-in;\nwidth:200px;\nbackground:red;\ntransform:rotateY(30deg)\n")])]),a("h3",{attrs:{id:"animation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#animation","aria-hidden":"true"}},[n._v("#")]),n._v(" animation")]),a("p",[n._v("animation和transition进行区分对比能够更好的理解两者的异同，首先animation的功能更加强大，通过'@keyframes eventName'对动画按帧进行：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("#dialog {\n  animation: mymove 1s;\n}\n@keyframes mymove {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n")])]),a("p",[n._v("animation也是一种动画过渡效果，但是他不需要事件支持，如果没有定义事件，那就是页面刷新时，开始计时，其次"),a("code",[n._v("@keyframes")]),n._v("中可以用from···to的方式线性执行动画，也可以分布执行如：0%···10%···45%···80%···100%。所以说，通过transition可以做到的animation都可以做到。\n那么什么时候应该用transition，什么时候用animation呢？凭感觉是，复杂的用animation，简易的用transition。")]),a("h3",{attrs:{id:"transform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transform","aria-hidden":"true"}},[n._v("#")]),n._v(" transform")]),a("p",[n._v("将transform放在最后，首先它不是动画，它只能算是在原有的图形上进行图形样式变化，如果要让目标动起来，还是需要借助animation和transition来实现。其次transform的属性值比较多，记忆成本较高。\ntransform分为2D和3D，如：\n2D转换：transform：translate(x,y)\n3D转换：transform：translate3d(x,y,z)")]),a("blockquote",[a("p",[n._v("transform接受的属性有，transform: rotate | scale | skew | translate |matrix;rotate(旋转)、skew(扭曲)、scale(缩放)、translate(移动)、matrix(矩阵变形)")])]),a("p",[n._v("transform ： none | transform-function [ transform-function ]——none表示可以接受多个属性，但是以空格分隔，而不是逗号。如：")]),a("blockquote",[a("p",[n._v("transform:rotate(30deg) scale(2,2);")])]),a("p",[n._v("接下来看一下具体属性的用法和效果：\ntransform:rotate(30deg) 顺时针旋转角度\ntransform:translate(100px,30px) 移动距离，x:向右平移，y:向下平移\ntransform:scale(2.5,1.5) //缩放比例\ntransform:skew(30deg,10deg) //旋转角度，x:逆时针，y:顺时针\n所有的变换都是以中点，设置transform-origin属性改变动画的中心点，transform-origin:(x,y) x,y自左上角向右向下")])])}],!1,null,null,null);t.default=e.exports}}]);