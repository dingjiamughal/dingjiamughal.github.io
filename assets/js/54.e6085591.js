(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{82:function(a,n,t){"use strict";t.r(n);var e=t(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"canvas学习-1-基础api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#canvas学习-1-基础api","aria-hidden":"true"}},[a._v("#")]),a._v(" canvas学习(1) 基础api")]),t("p",[a._v("自己对于canvas并不陌生，早在去年十月就接触过，因为只是一堂公开课，大致了解了canvas是用来做什么的而没有深入了解并作过项目。现在我准备写一个canvas学习历程系列，深入发掘html5之美。")]),t("h3",{attrs:{id:"canvas准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#canvas准备工作","aria-hidden":"true"}},[a._v("#")]),a._v(" canvas准备工作")]),t("blockquote",[t("p",[a._v("什么是canvas?")])]),t("p",[a._v("canvas就是html5的一个扩展标签，canvas能做到html+css所不能完成的效果，样式也好特效也罢。它提供了许多api绘图接口，所有的绘图都在"),t("code",[a._v("<canvas></canvas>")]),a._v("标签中展示，和普通的标签一样，我们可以对canvas元素进行样式编写，脚本控制：")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<canvas id="canvas" width="1024" height="768"></canvas>\n')])]),t("p",[a._v("这是个初始化的canvas标签，自带width和height标签属性，控制宽高，也可通过js控制")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("canvas.width=1024;\ncanvas.height=768;\n")])]),t("p",[a._v("可以通过在canvas标签中添加字段开检测浏览器是否兼容canvas，不兼容则会出现该字段：")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<canvas>您的浏览器不兼容canvas</canvas>\n")])]),t("h3",{attrs:{id:"获得2d环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获得2d环境","aria-hidden":"true"}},[a._v("#")]),a._v(" 获得2D环境")]),t("p",[a._v("在使用canvas作图时，除了要先获取canvas对象，还要获取2D环境，才可以操作它。2D环境顾名思义就是制作2D效果，所以操作过程在x和y轴进行，除了2D当然也有3D，先从2D开始起步。\n2D环境的获取方法：")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var context=document.getElementById("canvas").getContext("2d");\n')])]),t("p",[a._v("在定义完成之后，我们就可以利用html5 canvas中的api进行操作了。")]),t("h3",{attrs:{id:"介绍api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍api","aria-hidden":"true"}},[a._v("#")]),a._v(" 介绍API")]),t("p",[a._v("1.canvas路径\n"),t("code",[a._v("beginPath()")]),t("code",[a._v("moveTo(x,y)")]),t("code",[a._v("lineTo(x,y)")]),t("code",[a._v("closePath()")]),t("code",[a._v("lineWidth")]),t("code",[a._v("strokeStyle")]),t("code",[a._v("fillStyle")]),t("code",[a._v("fill()")]),a._v("\n首先最基础的从绘制线段开始：")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("context.beginPath();\ncontext.moveTo(100,100);\ncontext.lineTo(700,700);\ncontext.lineTo(100,700);\ncontext.lineTo(100,100);\ncontext.closePath()\n")])]),t("p",[a._v("canvas坐标系原点从左上角开始，向右正x轴向下正y轴\nbeginPath()表示开启新的路径绘画\nclosePath()可理解为用来表示结束，做图形闭合处理（从最后的状态点自动lineTo回归起始点封口）\n在beginPath和closePath中进行绘画，\nmoveTo()笔尖开始处，lineTo()笔尖落笔结束处，lineTo()后面可以一只跟lineTo()，它表示笔尖位置的变化，并且路径用1px黑线渲染。而一次path中只能moveTo一次。")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('context.lineWidth=2;\ncontext.strokeStyle="green"\n')])]),t("p",[a._v("strokeStyle:笔尖滑过路径（线段）颜色\nlineWidth：笔尖滑过路径（线段）粗细")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('context.fillStyle="black"\ncontext.fill();\n')])]),t("p",[a._v("fillStyle：填充色\nfill()：进行填充")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("context.stroke();\n")])]),t("p",[a._v("stroke()：收线，函数执行语句（执行的上方部分）有了stroke()才能执行上面函数，否则不生效。\n以上全部利用线段拼接制作了一个简单的三角图形。")]),t("p",[t("code",[a._v("arc(a,b,radius,start,end,boolen)")]),a._v("\narc(圆心x轴坐标，圆心y轴坐标，半径，起始弧度，结束弧度，boolen)\n最后一个参数是个boolen：默认为false，绘图方向为顺时针，true为逆时针\n弧度的0-2*Math.PI，从（1,0）坐标方向为0弧度开始，顺时针计算\n利用arc()可以绘制圆，和moveTo()-lineTo()用法一致，在beginPath()和closePath()中进行。\n重点是，如果一个canvas画布中有很多图，则一定要在画完图下面收线stroke()否则会出现样式覆盖的情况。")]),t("h3",{attrs:{id:"制作2d路径demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#制作2d路径demo","aria-hidden":"true"}},[a._v("#")]),a._v(" 制作2D路径demo")]),t("p",[a._v("利用线段和圆可以完成一些有意思的图形:\n类九宫格\n"),t("img",{attrs:{src:"/img/canvas-1.png",alt:"canvas(1)"}})]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  var arr = [\n      {coordinateArr: [{x: 0, y: 0}, {x: 800, y: 0}, {x: 400, y: 400}], color: '#caff67'},\n      {coordinateArr: [{x: 0, y: 0}, {x: 400, y: 400}, {x: 0, y: 800}], color: '#67becf'},\n      {coordinateArr: [{x: 800, y: 0}, {x: 800, y: 400}, {x: 600, y: 600}, {x: 600, y: 200}], color: '#ef3d61'},\n      {coordinateArr: [{x: 600, y: 200}, {x: 600, y: 600}, {x: 400, y: 400}], color: '#f9f51a'},\n      {coordinateArr: [{x: 400, y: 400}, {x: 600, y: 600}, {x: 400, y: 800}, {x: 200, y: 600}], color: '#a594c0'},\n      {coordinateArr: [{x: 200, y: 600}, {x: 400, y: 800}, {x: 0, y: 800}], color: '#fa8ecc'},\n      {coordinateArr: [{x: 800, y: 400}, {x: 800, y: 800}, {x: 400, y: 800}], color: '#caff67'},\n  ];\n  window.onload = function () {\n      var canvas = document.getElementById('canvas');\n      canvas.width = 800;\n      canvas.height = 800;\n      var ctx = canvas.getContext('2d');\n      arr.forEach(function (item, index) {\n          draw(item, ctx);\n      });\n  };\n  function draw(item, ctx) {\n      var coordinateArr = item.coordinateArr;\n      var color = item.color;\n      ctx.beginPath();\n      ctx.moveTo(coordinateArr[0].x, coordinateArr[0].y);\n      for (var i = 1; i < coordinateArr.length; i++) {\n          ctx.lineTo(coordinateArr[i].x, coordinateArr[i].y);\n      }\n      ctx.closePath();\n\n      ctx.fillStyle = color;\n      ctx.fill();\n\n      ctx.lineWidth = 5;\n      ctx.strokeStyle = '#000';\n      ctx.stroke();\n  }\n")])]),t("p",[a._v("弹性球：")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var canvas=document.getElementById('canvas');\nvar context=canvas.getContext('2d');\n\nvar ball={x:512,y:100,r:20,g:2,vx:-4,vy:0,color:\"#058\"}\nvar ww=1024;\nvar wh=768;\n\ncanvas.width=ww;\ncanvas.height=wh;\n\nvar timer=setInterval(function(){\n  render(context);\n  update();\n},50);\n//动画效果\nfunction update(){\n  ball.x+=ball.vx;\n  ball.y+=ball.vy;\n  ball.vy+=ball.g;\n  if(ball.y>=768-ball.r){\n    ball.y=768-ball.r;\n    ball.vy=-ball.vy;\n  }\n  if(ball.x<ball.r){\n    ball.x=ball.r;\n    ball.vx=-ball.vx\n  }\n  if(ball.y<ball.r){\n    ball.y=ball.r;\n    ball.vy=0;\n  }\n  if(ball.x>=1024-ball.r){\n    ball.x=1024-ball.r;\n    ball.vx=-ball.vx\n  }\n}\n\n//绘制canvas画布\nfunction render(context){\n  //上来先刷新图像\n  context.clearRect(0,0,context.canvas.width,context.canvas.height);\n  context.fillStyle=ball.color;\n  // context.fill();\n  context.beginPath();\n  context.arc(ball.x,ball.y,ball.r,0,2*Math.PI);\n  context.closePath();\n  context.fill();\n}\n")])]),t("h3",{attrs:{id:"canvas-text"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#canvas-text","aria-hidden":"true"}},[a._v("#")]),a._v(" Canvas - text")]),t("p",[a._v("没什么提别的就3个api之间也没相互关联记住就ok\n"),t("code",[a._v("font")]),a._v(" - 定义字体\n"),t("code",[a._v("fillText(text,x,y)")]),a._v(" - 实心文本\n"),t("code",[a._v("strokeText(text,x,y)")]),a._v(" - 空心文本")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('context.font="30px Arial"\ncontext.fillText("Hello World",10,50);\ncontext.strokeText("Hello World",10,50);\n')])]),t("h3",{attrs:{id:"canvas-渐变"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#canvas-渐变","aria-hidden":"true"}},[a._v("#")]),a._v(" Canvas - 渐变")]),t("p",[a._v("和css3 gradient类似，分为线性渐变和径向渐变\ncreateLinearGradient(x,y,x1,y1) - 线性渐变\ncreateRadialGradient(x,y,r,x1,y1,r1) - 径向/圆渐变\n具体用法有些特别,当我们使用渐变，必须使用两种或两种以上的停止颜色。")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 创建渐变\nvar grd=ctx.createLinearGradient(0,0,200,0);\ngrd.addColorStop(0,"red");\ngrd.addColorStop(0.3,"green");\ngrd.addColorStop(1,"white");\n// 填充渐变\nctx.fillStyle=grd;\nctx.fillRect(10,10,150,80);\n')])]),t("p",[a._v("createLinearGradient()四个参数为设置渐变的区域")])])}],!1,null,null,null);n.default=r.exports}}]);